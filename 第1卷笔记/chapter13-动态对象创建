operator new 
A *a = new A(1);
1、分配内存 malloc
2、调用构造函数
3、this指向返回值的地址

operator delete
delete a;
1、调用析构函数
2、释放内存 free

delete void* 可能会出错

operator new 找不到足够大的连续内存块来安排对象时，new-handler函数会被调用，默认产生一个异常
通过包含<new.h>,同set_new handler()替代new-handler

重载new和delete
重载new时，可以改变的只是内存分配部分(delete类似)

重载全局new和delete
operator new()的参数是size_t, 返回void*, 它所做的是分配内存而不是完成对象的建立(有构造函数完成)
operator delete()的参数是void*, 返回类型void
1-13-new1.cpp

对一个类重载new和delete
为一个类重载new和delete时，尽管不必显示地使用static，但实际上仍是在创建static成员函数
1-13-new2.cpp

为数组重载new和delete
如果一个类重载了 operator new()和 operator delete(),但要创建这个类的一个数组对象时，全局new将会被调用
可以通过重载 operator new[]和 operator delete[],来控制对象数组的内存分配
1-13-new3.cpp

如果new的内存没有分配成功，构造函数不会调用

定位new和delete
重载的new可以带一个或多个参数，第一个参数总是对象的长度，其它参数由我们自己定义：
一个放置对象的地址、一个对内存分配函数或对象的引用，或其他任何使我们方便的设置
在销毁这个对象时采用特殊的方法，因为只有一个版本的delete：显示地调用析构函数
1-13-new4.cpp