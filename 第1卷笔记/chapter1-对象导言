编程语言是对计算机的抽象，不同语言有不同的抽象哲学
OOP的抽象：
    万物皆对象
    程序就是一组对象，对象之间通过发送消息互相通知做什么
    每一个对象都有它自己的由其他对象构成的存储区
    每个对象都有一个类型
    一个特定类型的所有对象都能接收相同的消息
对象有一个接口

实现的隐藏 public private protected

实现的重用
组合 应当首先考虑
继承 重用接口 添加函数，覆盖函数

具有多态性的可交换对象
早捆绑 晚捆绑 virtual

创建与销毁对象 栈/堆 

分析和设计
制定计划
我们在做什么 建立需求分析、系统规范说明
我们将如何建立对象
创建核心
迭代用例
进化 维护
计划的回报

极限编程
先写测试 结对编程

C++成功的原因
C++：更好的C 堵塞C中的漏洞，提供更好的类型检查和编译时的分析
可以延续C程序员的代码
C++效率接近C,而OOP方法设计可能比C对应的版本有效
系统更容易表达和理解
尽量使用库
利用模板的源代码重用
错误处理：异常
大型程序设计