运算符重载仅仅是一种语法上的方便，是另外一种函数调用的方式

运算符重载参数列表中参数个数取决于两个因素
1、运算符是一元还是二元
2、运算符被定义为全局的还是成员函数，后者比前者少一个参数，该类的对象默认为第一个参数

可重载的运算符
一元 + - ～ & ! ++ -- ++(int) --(int)
二元 + - * / % ^ & | << >> += -= *= /= %= ^= &= |= <<= >>= == != < > <= >= && || = 
其中operator=只允许作成员函数重载
其他运算符
[] 必须是成员函数且只接受一个参数，可以返回一个引用
-> 一定是成员函数，必须返回一个对象或对象的引用，该对象也有一个指针间接引用运算符；
或者必须返回一个指针，被用于选择指针间接引用运算符箭头所指向的内容
->* ()(可以带任意参数) new delete ,(逗号运算符) 
不能重载的运算符
. .* ** 不能自定义没有的运算符 不能改变运算符优先级 

运算符重载应当遵循的模式
1、对于参数，如果只需要读而不会改变，应当作const& 传递，如果是成员函数，则成为const成员函数
2、返回值的类型取决于运算符的具体含义
3、所有赋值运算符均改变左值 应当返回一个引用
4、逻辑运算符至少得到int返回值，最好为bool
前置++与后置++视情况而定，为了一致性，两者可以都返回常量，在某些情况，前置++可以是非常量的

返回值优化
operator+中
return A(left.val + right.val);
优于
A tmp(left.val + right.val);
return tmp;
因为前置只有一个构造函数的开销

编译器会自动创建operator=

自动类型转换
1-12-automatic-type-conversion.cpp