C++中应当用内联函数取代宏

在声明函数时，inline不起作用
inline int f();
仅相当于声明

在类内部定义函数自动成为内联

小函数作为内联函数是理想的

编译器不能执行内联的情况
函数太复杂 大多数编译器会放弃内联，这时内联不能提高效率
要显示或隐式地取函数的地址 编译器要为函数分配内存从而产生一个地址，不会执行内联

内联仅是对编译器的一个建议

向前引用
C++规定，只有在类声明结束后，其中的内联函数才会被计算
1-9-inline.cpp

预处理器的3个特殊特征
字符串定义 
# 取一个标识符并把它转化成字符数组
字符串拼接 
cout << "hello"
        "world" << endl;
标志粘贴
## 允许设两个标识符并把它们粘贴在一起自动产生一个新的标识符，它的作用是先分隔，然后进行强制连接
#define A(name,type) type name##_##type
A(a,int) 展开为 int a_int