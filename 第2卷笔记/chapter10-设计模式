模式分类
1、创建型 用于怎样创建一个对象。通常包括隔离对象创建的细节，这样代码不依赖于对象是什么类型，
因此在增加一种新的对象类型时不需要改变代码。包括单件模式、工厂模式、构建器模式
2、结构型 影响对象之间的连接方式，确保系统的变化不需要改变对象间的连接。结构模式常常由工程项目限制条件来支配
包括代理模式、适配器模式
3、行为型 在程序中处理具有特定操作类型的对象，这些对象封装要执行的操作过程
包括命令模式、模板方法模式、状态模式、策略模式、职责链模式、观察者模式、多派遣模式、访问者模式

单件模式
允许一个类仅有有且仅有一个实例
2-10-singleton.cpp

命令模式
从直观的角度来看，命令模式就是一个函数对象，通过将函数封装为对象就能够以参数的形式将其传递给其他函数或对象，
告诉它们在履行请求的过程中执行特定的操作，命令模式可以用来消除与事件处理的耦合
2-10-command.cpp

代理模式和状态模式
代理模式和状态模式都提供一个代理类。代码与代理类打交道，而做实际工作的类隐藏在代理类背后
当调用代理类中的一个函数时，代理类仅转而去调用实现类中相应的函数。
代理模式只有一个实现类，状态模式有多个实现，代理模式控制对其实现类的访问，状态模式动态地改变其实现类
2-10-proxy.cpp
2-10-state.cpp

适配器模式
接受一种类型并且提供一个对其他类型的接口

模板方法模式
隐藏在覆盖的下方，通过调用基类的不同函数来驱动程序运行，特点是定义在基类中且不能改动

策略模式
利用组合 运行时选择算法

职责链模式
尝试采用一系列策略模式 遍历策略链的不同实现，直到达到某个条件

工厂模式
强制用一个通用的工厂来创建对象，而不允许将创建对象的代码散布整个系统
2-10-factory.cpp

构建器模式
将对象的创建与它的表示法分开 创建复杂对象

观察者模式
解决当其他对象改变状态时，更新一组对象的问题

多重派遣
解决在多个类型的对象之间操作的问题

访问者模式
将类继承层次结构上的操作与这个层次结构本身分开