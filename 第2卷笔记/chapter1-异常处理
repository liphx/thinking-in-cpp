为什么C库中的信号处理系统与非局部跳转函数不适合处理C++的错误
它们并不调用析构函数，对象不会被正确的清理
C++标准说明，使用goto跳入某个作用域（有效地跳过析构函数的调用）
或使用longjmp()跳出某个作用域（这个作用域的栈中有某个对象需要析构）时，程序的行为是不确定的

2-1-exception1.cpp

异常处理：终止和回复
C++采用终止模型，若要考虑恢复，通常将try放入while中，直到产生满意的结果

最好通过引用而不是通过值来捕获异常，以防止异常对象所包含的信息被切割掉

2-1-exception2.cpp
比较有意义的做法：首先捕获派生类异常，并且将基类异常放到最后用于捕获其他不太具体的异常

捕获所有异常
catch(...){
    //
}

重新抛出异常，使用不带参数的throw
catch(...){
    //释放资源
    throw;
}

terminate()
如果没有任何层次的异常处理器能够捕获某种异常，<exception>中的 terminate()会被自动调用
默认情况， terminate() 调用标准C库函数 abort() 使程序执行异常终止而退出
abort() 被调用时，程序不会调用正常的终止函数，全局对象和静态对象的析构函数不会执行

set_terminate()
参数是函数指针，用以设定调用的 terminate() ,这个函数指针没有参数且返回值必须是void类型
set_terminate()返回之前设定的函数指针，因此可以用来保存原始的 terminate()函数
void my_terminate();
void (*old)() = set_terminate(my_terminate);

当一个对象的构造函数在执行过程中抛出异常，那么这个对象的析构函数就不会调用
2-1-exception3.cpp
如果一个对象的构造函数在抛出异常前完成，那么栈反解的时候它们的析构函数也会调用

函数级try块
2-1-exception4.cpp

标准异常
<exception> exception 
<stdexcept> logic_error runtime_error
int main(){
    try{
        throw logic_error("error");
    }catch(logic_error& e){
        cout << e.what() << endl;//error
    }
}
exception没有提供参数为string的构造函数，因此最好从 logic_error runtime_error 派生自己的异常类

异常规格说明
void f();//传统函数，可能抛出任意类型的异常
void f() throw(exception1, exception2);//抛出异常类型
void f() throw();//不会抛出任何异常
如果函数抛出的异常不在异常规格说明中，unexpected()会被调用，它默认会调用 terminate()，也可以使用set_unexpected()
应避免在模板类中使用异常规格说明

继承中的异常规格说明 
派生类覆盖基类函数时，派生类函数可以说明抛出更少的异常，或者抛出的异常是基类函数抛出异常的子类(协变)

异常安全
一个例子：stack 的 pop()声明为void pop()
不把 T top() 与void pop() 合并成 T pop()的原因是如果在拷贝这个对象的时候发生异常，函数没有将栈顶元素返回但下标已经减1
为了实现异常安全，应准守内聚原则，一个函数只做部分事情

什么时候避免异常
不要在异步事件中使用异常
不要在处理简单错误的时候使用异常
不要将异常用于程序的流程控制
不要强迫自己使用异常
新异常，老代码：对现有代码添加异常机制最直接的方法是把使用新库(新库有异常机制)的地方直接放在try块中，然后捕获所有异常

使用异常造成的开销
编译器需要在栈上放置额外的信息，来辅助栈反解过程